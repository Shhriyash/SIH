{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/takza/OneDrive/Desktop/Devlopment/React/daakmadaad/app/Postoffice/page.js"],"sourcesContent":["'use client'\r\nimport React, { useState } from 'react'\r\nimport axios from 'axios'\r\nimport Link from 'next/link'\r\nimport Sidebar from '../Components/Sidebar'\r\n\r\n// Sample state-to-city mapping for demonstration\r\nconst stateCityMapping = {\r\n  \"Andhra Pradesh\": [\"Visakhapatnam\", \"Vijayawada\", \"Guntur\"],\r\n  \"Maharashtra\": [\"Mumbai\", \"Pune\", \"Nagpur\"],\r\n  \"Tamil Nadu\": [\"Chennai\", \"Coimbatore\", \"Madurai\"],\r\n  \"Uttar Pradesh\": [\"Lucknow\", \"Kanpur\", \"Varanasi\"],\r\n  \"West Bengal\": [\"Kolkata\", \"Darjeeling\", \"Howrah\"],\r\n}\r\n\r\nexport default function PostOfficeLocator() {\r\n  const [state, setState] = useState('')\r\n  const [city, setCity] = useState('')\r\n  const [pincode, setPincode] = useState('')\r\n  const [postOffices, setPostOffices] = useState([])\r\n  const [error, setError] = useState('')\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const handleStateChange = (e) => {\r\n    setState(e.target.value)\r\n    setCity('') // Reset city when state changes\r\n  }\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault()\r\n    setError('')\r\n    setPostOffices([])\r\n    setIsLoading(true)\r\n\r\n    try {\r\n      if (pincode) {\r\n        // Fetch post office details by pincode\r\n        const response = await axios.get(`https://api.postalpincode.in/pincode/${pincode}`)\r\n        const data = response.data[0]\r\n        if (data.Status === 'Success') {\r\n          setPostOffices(data.PostOffice || [])\r\n        } else {\r\n          setError('No post offices found for the given pincode.')\r\n        }\r\n      } else if (city) {\r\n        // Fetch post office details by branch name\r\n        const response = await axios.get(`https://api.postalpincode.in/postoffice/${city}`)\r\n        const data = response.data[0]\r\n        if (data.Status === 'Success') {\r\n          setPostOffices(data.PostOffice || [])\r\n        } else {\r\n          setError('No post offices found for the given city.')\r\n        }\r\n      } else {\r\n        setError('Please enter a valid pincode or select a state and city.')\r\n      }\r\n    } catch (err) {\r\n      setError('Error fetching post office data. Please try again.')\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  const handleReset = () => {\r\n    setState('')\r\n    setCity('')\r\n    setPincode('')\r\n    setPostOffices([])\r\n    setError('')\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      <div className=\"bg-white border-b\">\r\n        <div className=\"container mx-auto px-4 py-2\">\r\n          <p className=\"text-sm\">\r\n            You are here: <Link href=\"/\" className=\"text-blue-600 hover:underline\">Home</Link> {'>'} Locate Post Office\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"container mx-auto px-4 py-6\">\r\n        <div className=\"grid grid-cols-1 md:grid-cols-[250px_1fr] gap-6\">\r\n          <Sidebar />\r\n          <div className=\"bg-white p-6 shadow-lg rounded-lg\">\r\n            <h1 className=\"text-3xl font-bold mb-4\">Locate Nearest Post Office</h1>\r\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n              <div className=\"space-y-4\">\r\n                <p className=\"text-sm\">* Indicates a required field.</p>\r\n\r\n                <div className=\"space-y-2\">\r\n                  <label htmlFor=\"state\" className=\"block text-sm font-medium text-gray-700\">\r\n                    State <span className=\"text-red-500\">*</span>\r\n                  </label>\r\n                  <select\r\n                    id=\"state\"\r\n                    value={state}\r\n                    onChange={handleStateChange}\r\n                    className=\"mt-1 border block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-red-500 focus:border-red-500 sm:text-sm rounded-md\"\r\n                  >\r\n                    <option value=\"\">Select a state</option>\r\n                    {Object.keys(stateCityMapping).map((state) => (\r\n                      <option key={state} value={state}>{state}</option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"space-y-2\">\r\n                  <label htmlFor=\"city\" className=\"block text-sm font-medium text-gray-700\">\r\n                    City / District <span className=\"text-red-500\">*</span>\r\n                  </label>\r\n                  <select\r\n                    id=\"city\"\r\n                    value={city}\r\n                    onChange={(e) => setCity(e.target.value)}\r\n                    disabled={!state}\r\n                    className=\"mt-1 border block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-red-500 focus:border-red-500 sm:text-sm rounded-md\"\r\n                  >\r\n                    <option value=\"\">Select a city</option>\r\n                    {state && stateCityMapping[state].map((city) => (\r\n                      <option key={city} value={city}>{city}</option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n\r\n                <div className=\"space-y-2\">\r\n                  <label htmlFor=\"pincode\" className=\"block text-sm font-medium text-gray-700\">\r\n                    Pincode\r\n                  </label>\r\n                  <input\r\n                    id=\"pincode\"\r\n                    type=\"text\"\r\n                    value={pincode}\r\n                    onChange={(e) => setPincode(e.target.value)}\r\n                    className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-red-500 focus:border-red-500 sm:text-sm\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"flex gap-4 justify-end\">\r\n                <button\r\n                  type=\"submit\"\r\n                  disabled={isLoading}\r\n                  className=\"px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-red-800 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500\"\r\n                >\r\n                  {isLoading ? 'Searching...' : 'Search'}\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={handleReset}\r\n                  className=\"px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500\"\r\n                >\r\n                  Reset\r\n                </button>\r\n              </div>\r\n            </form>\r\n\r\n            {postOffices.length > 0 && (\r\n              <div className=\"mt-6\">\r\n                <h2 className=\"text-lg font-semibold\">Nearest Post Offices:</h2>\r\n                <ul className=\"mt-4 space-y-4\">\r\n                  {postOffices.map((office, index) => (\r\n                    <li key={index} className=\"p-4 border rounded-md bg-gray-100\">\r\n                      <p><strong>Name:</strong> {office.Name}</p>\r\n                      <p><strong>Branch Type:</strong> {office.BranchType}</p>\r\n                      <p><strong>District:</strong> {office.District}</p>\r\n                      <p><strong>State:</strong> {office.State}</p>\r\n                      <p><strong>Pincode:</strong> {office.Pincode}</p>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            )}\r\n\r\n            {error && (\r\n              <div className=\"mt-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded\">\r\n                {error}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 589, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}